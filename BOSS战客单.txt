设置
{
	大厅
	{
		地图轮换: 完成比赛后
		比赛结束后转换队伍: 否
		比赛语音聊天: 启用
		玩家上限 队伍1: 10
		玩家上限 队伍2: 2
		返回大厅: 从不
		队列中的玩家可以加入: 是
	}

	模式
	{
		团队死斗
		{
			启用地图
			{
				地图工坊岛屿 972777519512063901
			}
		}

		综合
		{
			主动复生: 关闭
			双方队伍获胜得分差异: 开启
			复生时间: 50%
			游戏模式开始: 即时
			英雄限制: 关闭
			重装职责被动生命值加成: 禁用
			队伍1获胜所需分数: 2
			队伍2获胜所需分数: 100
		}
	}

	地图工坊
	{
		BOSS伤害每几秒递增一次: 10.000
		BOSS每次递增的伤害百分比: 1000.000
		BOSS每次递增的体型尺寸倍数: 1.000
		BOSS的体型尺寸每几秒递增一次: 16200.000
		BOSS的初始体型尺寸倍数: 1.000
	}
}

变量
{
	全局:
		0: GLB_BossExtraHealth
		1: GLB_BossExtraHealthTimes
		2: GLB_BossDefaultBodySize
		3: GLB_BossDamageMultiplyDurationS
		4: GLB_BossDamageMultiplierPerTime
		5: GLB_BossBodyMultiplyDurationS
		6: GLB_BossBodyMultiplierPerTime

	玩家:
		0: PLR_PAR_A
		1: PLR_BossCurrentDamageMultiplier
		2: PLR_BossCurrentBodyMultiplier
		3: PLR_DoomfistSecondFireTriggered
		4: PLR_DoomfistSecondFireCounter
}

规则("调整BOSS的初始体型尺寸倍数")
{
	事件
	{
		持续 - 每名玩家;
		队伍2;
		全部;
	}

	动作
	{
		全局.GLB_BossDefaultBodySize = 地图工坊设置实数(自定义字符串("分类"), 自定义字符串("BOSS的初始体型尺寸倍数"), 1, 0.100, 20, 0);
		开始调整玩家大小(事件玩家, 全局.GLB_BossDefaultBodySize, 假);
	}
}

规则("初始化BOSS额外生命值数据")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		全局.GLB_BossExtraHealth = 地图工坊设置整数(自定义字符串("分类"), 自定义字符串("BOSS额外生命值"), 0, 0, 149985, 0);
		全局.GLB_BossExtraHealthTimes = 全局.GLB_BossExtraHealth / 9999;
	}
}

规则("为BOSS玩家添加额外生命值")
{
	事件
	{
		持续 - 每名玩家;
		队伍2;
		全部;
	}

	动作
	{
		设置最大生命值(事件玩家, 地图工坊设置整数(自定义字符串("分类"), 自定义字符串("BOSS原始生命值百分比"), 100, 100, 1000, 0));
		For 玩家变量(事件玩家, PLR_PAR_A, 0, 全局.GLB_BossExtraHealthTimes, 1);
			为玩家添加生命池(事件玩家, 生命值, 9999, 真, 假);
		End;
		根据条件跳过(全局.GLB_BossExtraHealth % 9999 == 0, 1);
		为玩家添加生命池(事件玩家, 生命值, 全局.GLB_BossExtraHealth % 9999, 真, 假);
	}
}

规则("初始化BOSS伤害递增数据")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		全局.GLB_BossDamageMultiplyDurationS = 地图工坊设置实数(自定义字符串("BOSS伤害递增"), 自定义字符串("BOSS伤害每几秒递增一次"), 10, 1, 16200, 0);
		全局.GLB_BossDamageMultiplierPerTime = 地图工坊设置实数(自定义字符串("BOSS伤害递增"), 自定义字符串("BOSS每次递增的伤害百分比"), 10, 1, 1000, 0);
	}
}

规则("调整BOSS玩家伤害")
{
	事件
	{
		持续 - 每名玩家;
		队伍2;
		全部;
	}

	条件
	{
		游戏正在进行中 == 真;
		已重生(事件玩家) == 真;
	}

	动作
	{
		事件玩家.PLR_BossCurrentDamageMultiplier = 100;
		While(事件玩家.PLR_BossCurrentDamageMultiplier < 1000);
			等待(全局.GLB_BossDamageMultiplyDurationS, 无视条件);
			If(事件玩家.PLR_BossCurrentDamageMultiplier + 全局.GLB_BossDamageMultiplierPerTime > 1000);
				事件玩家.PLR_BossCurrentDamageMultiplier = 1000;
			Else;
				事件玩家.PLR_BossCurrentDamageMultiplier += 全局.GLB_BossDamageMultiplierPerTime;
			End;
			设置造成伤害(所有玩家(队伍2), 事件玩家.PLR_BossCurrentDamageMultiplier);
		End;
	}
}

规则("初始化BOSS体型尺寸递增数据")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		全局.GLB_BossBodyMultiplyDurationS = 地图工坊设置实数(自定义字符串("BOSS的体型尺寸递增"), 自定义字符串("BOSS的体型尺寸每几秒递增一次"), 10, 1, 16200, 0);
		全局.GLB_BossBodyMultiplierPerTime = 地图工坊设置实数(自定义字符串("BOSS的体型尺寸递增"), 自定义字符串("BOSS每次递增的体型尺寸倍数"), 1, 0.100, 19.900, 0);
	}
}

规则("调整BOSS体型尺寸")
{
	事件
	{
		持续 - 每名玩家;
		队伍2;
		全部;
	}

	条件
	{
		游戏正在进行中 == 真;
		已重生(事件玩家) == 真;
	}

	动作
	{
		事件玩家.PLR_BossCurrentBodyMultiplier = 全局.GLB_BossDefaultBodySize;
		While(事件玩家.PLR_BossCurrentBodyMultiplier < 20);
			等待(全局.GLB_BossBodyMultiplyDurationS, 无视条件);
			If(事件玩家.PLR_BossCurrentBodyMultiplier + 全局.GLB_BossBodyMultiplierPerTime > 20);
				事件玩家.PLR_BossCurrentBodyMultiplier = 20;
			Else;
				事件玩家.PLR_BossCurrentBodyMultiplier += 全局.GLB_BossBodyMultiplierPerTime;
			End;
			开始调整玩家大小(所有玩家(队伍2), 事件玩家.PLR_BossCurrentBodyMultiplier, 假);
		End;
	}
}

规则("调整比赛最大持续时间")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		游戏正在进行中 == 真;
	}

	动作
	{
		设置比赛时间(地图工坊设置整数(自定义字符串("分类"), 自定义字符串("比赛最大持续时间秒数"), 180, 60, 16200, 0));
	}
}

规则("BOSS阵营造成击杀或人类阵营玩家自鲨")
{
	事件
	{
		玩家阵亡;
		队伍1;
		全部;
	}

	条件
	{
		(所在队伍(攻击方) == 队伍2 || 所在队伍(攻击方) != 队伍2) == 真;
	}

	动作
	{
		修改队伍分数(队伍2, 1);
	}
}

规则("关闭模式默认行为")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		关闭游戏预设计分模式;
	}
}

规则("创建界面")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		创建HUD文本(所有玩家(所有队伍), 空, 空, 空, 右边, 0.100, 颜色(白色), 颜色(红色), 颜色(白色), 可见和字符串, 始终不可见);
	}
}

规则("人类奥丽莎右键击退增加")
{
	事件
	{
		持续 - 每名玩家;
		队伍1;
		奥丽莎;
	}

	条件
	{
		正在使用辅助武器(事件玩家) == 真;
	}

	动作
	{
		设置造成的击退(事件玩家, 1000);
		等待直到 (正在使用辅助武器(事件玩家) == 假, 10);
		等待(0.500, 无视条件);
		设置造成的击退(事件玩家, 100);
	}
}

规则("人类奥丽莎右键击倒实现")
{
	事件
	{
		玩家造成伤害;
		队伍1;
		奥丽莎;
	}

	条件
	{
		事件技能 == 按钮(辅助攻击模式);
	}

	动作
	{
		设置状态(被攻击方, 事件玩家, 击倒, 1);
	}
}

规则("人类路霸钩子冻结实现")
{
	事件
	{
		玩家造成伤害;
		队伍1;
		路霸;
	}

	条件
	{
		事件技能 == 按钮(技能1);
	}

	动作
	{
		设置状态(被攻击方, 事件玩家, 冰冻, 3);
	}
}

规则("人类卡西迪闪光弹击倒实现")
{
	事件
	{
		玩家造成伤害;
		队伍1;
		卡西迪;
	}

	条件
	{
		事件技能 == 按钮(技能2);
	}

	动作
	{
		设置状态(被攻击方, 事件玩家, 击倒, 1);
	}
}

规则("人类温斯顿大跳击倒实现")
{
	事件
	{
		玩家造成伤害;
		队伍1;
		温斯顿;
	}

	条件
	{
		事件技能 == 按钮(技能1);
	}

	动作
	{
		设置状态(被攻击方, 事件玩家, 击倒, 1);
	}
}

规则("人类铁拳十三连拳实现")
{
	事件
	{
		玩家造成伤害;
		队伍1;
		末日铁拳;
	}

	条件
	{
		事件玩家.PLR_DoomfistSecondFireTriggered == 假;
		事件技能 == 按钮(辅助攻击模式);
	}

	动作
	{
		事件玩家.PLR_DoomfistSecondFireTriggered = 真;
		事件玩家.PLR_DoomfistSecondFireCounter = 0;
		For 玩家变量(事件玩家, PLR_DoomfistSecondFireCounter, 0, 13, 1);
			设置技能冷却(事件玩家, 按钮(辅助攻击模式), 0);
			按下按键(事件玩家, 按钮(辅助攻击模式));
			根据条件跳过(存活(事件玩家) == 真, 1);
			中断;
			等待(0.300, 无视条件);
		End;
		事件玩家.PLR_DoomfistSecondFireTriggered = 假;
	}
}